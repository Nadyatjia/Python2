#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from line import LineService
from line.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  RSAKey getRSAKey()')
  print('  void notifyEmailConfirmationResult( parameterMap)')
  print('  string registerVirtualAccount(string locale, string encryptedVirtualUserId, string encryptedPassword)')
  print('  void requestVirtualAccountPasswordChange(string virtualMid, string encryptedVirtualUserId, string encryptedOldPassword, string encryptedNewPassword)')
  print('  void requestVirtualAccountPasswordSet(string virtualMid, string encryptedVirtualUserId, string encryptedNewPassword)')
  print('  void unregisterVirtualAccount(string virtualMid)')
  print('  UserAgeType checkUserAge(CarrierCode carrier, string sessionId, string verifier, i32 standardAge)')
  print('  AgeCheckDocomoResult checkUserAgeWithDocomo(string openIdRedirectUrl, i32 standardAge, string verifier)')
  print('  string retrieveOpenIdAuthUrlWithDocomo()')
  print('  AgeCheckRequestResult retrieveRequestToken(CarrierCode carrier)')
  print('  void addBuddyMember(string requestId, string userMid)')
  print('  void addBuddyMembers(string requestId,  userMids)')
  print('  void blockBuddyMember(string requestId, string mid)')
  print('   commitSendMessagesToAll( requestIdList)')
  print('   commitSendMessagesToMids( requestIdList,  mids)')
  print('  bool containsBuddyMember(string requestId, string userMid)')
  print('  string downloadMessageContent(string requestId, string messageId)')
  print('  string downloadMessageContentPreview(string requestId, string messageId)')
  print('  string downloadProfileImage(string requestId)')
  print('  string downloadProfileImagePreview(string requestId)')
  print('  i64 getActiveMemberCountByBuddyMid(string buddyMid)')
  print('   getActiveMemberMidsByBuddyMid(string buddyMid)')
  print('   getAllBuddyMembers()')
  print('   getBlockedBuddyMembers()')
  print('  i64 getBlockerCountByBuddyMid(string buddyMid)')
  print('  BuddyDetail getBuddyDetailByMid(string buddyMid)')
  print('  BuddyProfile getBuddyProfile()')
  print('  Ticket getContactTicket()')
  print('  i64 getMemberCountByBuddyMid(string buddyMid)')
  print('  SendBuddyMessageResult getSendBuddyMessageResult(string sendBuddyMessageRequestId)')
  print('  SetBuddyOnAirResult getSetBuddyOnAirResult(string setBuddyOnAirRequestId)')
  print('  UpdateBuddyProfileResult getUpdateBuddyProfileResult(string updateBuddyProfileRequestId)')
  print('  bool isBuddyOnAirByMid(string buddyMid)')
  print('  string linkAndSendBuddyContentMessageToAllAsync(string requestId, Message msg, string sourceContentId)')
  print('  SendBuddyMessageResult linkAndSendBuddyContentMessageToMids(string requestId, Message msg, string sourceContentId,  mids)')
  print('  void notifyBuddyBlocked(string buddyMid, string blockerMid)')
  print('  void notifyBuddyUnblocked(string buddyMid, string blockerMid)')
  print('  string registerBuddy(string buddyId, string searchId, string displayName, string statusMeessage, string picture,  settings)')
  print('  string registerBuddyAdmin(string buddyId, string searchId, string displayName, string statusMessage, string picture)')
  print('  string reissueContactTicket(i64 expirationTime, i32 maxUseCount)')
  print('  void removeBuddyMember(string requestId, string userMid)')
  print('  void removeBuddyMembers(string requestId,  userMids)')
  print('  SendBuddyMessageResult sendBuddyContentMessageToAll(string requestId, Message msg, string content)')
  print('  string sendBuddyContentMessageToAllAsync(string requestId, Message msg, string content)')
  print('  SendBuddyMessageResult sendBuddyContentMessageToMids(string requestId, Message msg, string content,  mids)')
  print('  string sendBuddyContentMessageToMidsAsync(string requestId, Message msg, string content,  mids)')
  print('  SendBuddyMessageResult sendBuddyMessageToAll(string requestId, Message msg)')
  print('  string sendBuddyMessageToAllAsync(string requestId, Message msg)')
  print('  SendBuddyMessageResult sendBuddyMessageToMids(string requestId, Message msg,  mids)')
  print('  string sendBuddyMessageToMidsAsync(string requestId, Message msg,  mids)')
  print('  void sendIndividualEventToAllAsync(string requestId, string buddyMid, NotificationStatus notificationStatus)')
  print('  SetBuddyOnAirResult setBuddyOnAir(string requestId, bool onAir)')
  print('  string setBuddyOnAirAsync(string requestId, bool onAir)')
  print('  SendBuddyMessageResult storeMessage(string requestId, BuddyMessageRequest messageRequest)')
  print('  void unblockBuddyMember(string requestId, string mid)')
  print('  void unregisterBuddy(string requestId)')
  print('  void unregisterBuddyAdmin(string requestId)')
  print('  void updateBuddyAdminProfileAttribute(string requestId,  attributes)')
  print('  void updateBuddyAdminProfileImage(string requestId, string picture)')
  print('  UpdateBuddyProfileResult updateBuddyProfileAttributes(string requestId,  attributes)')
  print('  string updateBuddyProfileAttributesAsync(string requestId,  attributes)')
  print('  UpdateBuddyProfileResult updateBuddyProfileImage(string requestId, string image)')
  print('  string updateBuddyProfileImageAsync(string requestId, string image)')
  print('  void updateBuddySearchId(string requestId, string searchId)')
  print('  void updateBuddySettings( settings)')
  print('  string uploadBuddyContent(ContentType contentType, string content)')
  print('   findBuddyContactsByQuery(string language, string country, string query, i32 fromIndex, i32 count, BuddySearchRequestSource requestSource)')
  print('   getBuddyContacts(string language, string country, string classification, i32 fromIndex, i32 count)')
  print('  BuddyDetail getBuddyDetail(string buddyMid)')
  print('  BuddyOnAir getBuddyOnAir(string buddyMid)')
  print('   getCountriesHavingBuddy()')
  print('   getNewlyReleasedBuddyIds(string country)')
  print('  BuddyBanner getPopularBuddyBanner(string language, string country, ApplicationType applicationType, string resourceSpecification)')
  print('   getPopularBuddyLists(string language, string country)')
  print('   getPromotedBuddyContacts(string language, string country)')
  print('  i64 activeBuddySubscriberCount()')
  print('  void addOperationForChannel(OpType opType, string param1, string param2, string param3)')
  print('  i64 displayBuddySubscriberCount()')
  print('  Contact findContactByUseridWithoutAbuseBlockForChannel(string userid)')
  print('   getAllContactIdsForChannel()')
  print('   getCompactContacts(i64 lastModifiedTimestamp)')
  print('   getContactsForChannel( ids)')
  print('  string getDisplayName(string mid)')
  print('   getFavoriteMidsForChannel()')
  print('   getFriendMids()')
  print('   getGroupMemberMids(string groupId)')
  print('   getGroupsForChannel( groupIds)')
  print('  IdentityCredential getIdentityCredential()')
  print('   getJoinedGroupIdsForChannel()')
  print('  MetaProfile getMetaProfile()')
  print('  string getMid()')
  print('  SimpleChannelClient getPrimaryClientForChannel()')
  print('  Profile getProfileForChannel()')
  print('   getSimpleChannelContacts( ids)')
  print('  string getUserCountryForBilling(string country, string remoteIp)')
  print('  i64 getUserCreateTime()')
  print('   getUserIdentities()')
  print('  string getUserLanguage()')
  print('   getUserMidsWhoAddedMe()')
  print('  bool isGroupMember(string groupId)')
  print('  bool isInContact(string mid)')
  print('  string registerChannelCP(string cpId, string registerPassword)')
  print('  void removeNotificationStatus(NotificationStatus notificationStatus)')
  print('  Message sendMessageForChannel(Message message)')
  print('  void sendPinCodeOperation(string verifier)')
  print('  void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string value)')
  print('  ChannelToken approveChannelAndIssueChannelToken(string channelId)')
  print('  string approveChannelAndIssueRequestToken(string channelId, string otpId)')
  print('  NotificationFetchResult fetchNotificationItems(i64 localRev)')
  print('  ApprovedChannelInfos getApprovedChannels(i64 lastSynced, string locale)')
  print('  ChannelInfo getChannelInfo(string channelId, string locale)')
  print('  ChannelNotificationSetting getChannelNotificationSetting(string channelId, string locale)')
  print('   getChannelNotificationSettings(string locale)')
  print('  ChannelInfos getChannels(i64 lastSynced, string locale)')
  print('  ChannelDomains getDomains(i64 lastSynced)')
  print('  FriendChannelMatricesResponse getFriendChannelMatrices( channelIds)')
  print('  i32 getNotificationBadgeCount(i64 localRev)')
  print('  ChannelToken issueChannelToken(string channelId)')
  print('  string issueRequestToken(string channelId, string otpId)')
  print('  RequestTokenResponse issueRequestTokenWithAuthScheme(string channelId, string otpId,  authScheme, string returnUrl)')
  print('  string reserveCoinUse(CoinUseReservation request, string locale)')
  print('  void revokeChannel(string channelId)')
  print('  ChannelSyncDatas syncChannelData(i64 lastSynced, string locale)')
  print('  void updateChannelNotificationSetting( setting)')
  print('  MessageOperations fetchMessageOperations(i64 localRevision, i64 lastOpTimestamp, i32 count)')
  print('  LastReadMessageIds getLastReadMessageIds(string chatId)')
  print('   multiGetLastReadMessageIds( chatIds)')
  print('  void buyCoinProduct(PaymentReservation paymentReservation)')
  print('  void buyFreeProduct(string receiverMid, string productId, i32 messageTemplate, string language, string country, i64 packageId)')
  print('  void buyMustbuyProduct(string receiverMid, string productId, i32 messageTemplate, string language, string country, i64 packageId, string serialNumber)')
  print('  void checkCanReceivePresent(string recipientMid, i64 packageId, string language, string country)')
  print('  ProductList getActivePurchases(i64 start, i32 size, string language, string country)')
  print('  ProductSimpleList getActivePurchaseVersions(i64 start, i32 size, string language, string country)')
  print('   getCoinProducts(PaymentType appStoreCode, string country, string language)')
  print('   getCoinProductsByPgCode(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)')
  print('  CoinHistoryResult getCoinPurchaseHistory(CoinHistoryCondition request)')
  print('  CoinHistoryResult getCoinUseAndRefundHistory(CoinHistoryCondition request)')
  print('  ProductList getDownloads(i64 start, i32 size, string language, string country)')
  print('  ProductList getEventPackages(i64 start, i32 size, string language, string country)')
  print('  ProductList getNewlyReleasedPackages(i64 start, i32 size, string language, string country)')
  print('  ProductList getPopularPackages(i64 start, i32 size, string language, string country)')
  print('  ProductList getPresentsReceived(i64 start, i32 size, string language, string country)')
  print('  ProductList getPresentsSent(i64 start, i32 size, string language, string country)')
  print('  Product getProduct(i64 packageID, string language, string country)')
  print('  ProductList getProductList( productIdList, string language, string country)')
  print('  ProductList getProductListWithCarrier( productIdList, string language, string country, string carrierCode)')
  print('  Product getProductWithCarrier(i64 packageID, string language, string country, string carrierCode)')
  print('  ProductList getPurchaseHistory(i64 start, i32 size, string language, string country)')
  print('  Coin getTotalBalance(PaymentType appStoreCode)')
  print('  i64 notifyDownloaded(i64 packageId, string language)')
  print('  PaymentReservationResult reserveCoinPurchase(CoinPurchaseReservation request)')
  print('  PaymentReservationResult reservePayment(PaymentReservation paymentReservation)')
  print('  SnsFriends getSnsFriends(SnsIdType snsIdType, string snsAccessToken, i32 startIdx, i32 limit)')
  print('  SnsProfile getSnsMyProfile(SnsIdType snsIdType, string snsAccessToken)')
  print('  void postSnsInvitationMessage(SnsIdType snsIdType, string snsAccessToken, string toSnsUserId)')
  print('  void acceptGroupInvitation(i32 reqSeq, string groupId)')
  print('  void acceptGroupInvitationByTicket(i32 reqSeq, string groupId, string ticketId)')
  print('  void acceptProximityMatches(string sessionId,  ids)')
  print('   acquireCallRoute(string to)')
  print('  string acquireCallTicket(string to)')
  print('  string acquireEncryptedAccessToken(FeatureType featureType)')
  print('  string addSnsId(SnsIdType snsIdType, string snsAccessToken)')
  print('  void blockContact(i32 reqSeq, string id)')
  print('  void blockRecommendation(i32 reqSeq, string id)')
  print('  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)')
  print('  VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)')
  print('  void clearIdentityCredential()')
  print('  void clearMessageBox(string channelId, string messageBoxId)')
  print('  void closeProximityMatch(string sessionId)')
  print('   commitSendMessage(i32 seq, string messageId,  receiverMids)')
  print('   commitSendMessages(i32 seq,  messageIds,  receiverMids)')
  print('   commitUpdateProfile(i32 seq,  attrs,  receiverMids)')
  print('  void confirmEmail(string verifier, string pinCode)')
  print('  Group createGroup(i32 seq, string name,  contactIds)')
  print('  string createQrcodeBase64Image(string url, string characterSet, i32 imageSize, i32 x, i32 y, i32 width, i32 height)')
  print('  Room createRoom(i32 reqSeq,  contactIds)')
  print('  string createSession()')
  print('   fetchAnnouncements(i32 lastFetchedIndex)')
  print('   fetchMessages(i64 localTs, i32 count)')
  print('   fetchOperations(i64 localRev, i32 count)')
  print('   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)')
  print('   findAndAddContactsByEmail(i32 reqSeq,  emails)')
  print('   findAndAddContactsByMid(i32 reqSeq, string mid)')
  print('   findAndAddContactsByPhone(i32 reqSeq,  phones)')
  print('   findAndAddContactsByUserid(i32 reqSeq, string userid)')
  print('  Contact findContactByUserid(string userid)')
  print('  Contact findContactByUserTicket(string ticketId)')
  print('  Group findGroupByTicket(string ticketId)')
  print('   findContactsByEmail( emails)')
  print('   findContactsByPhone( phones)')
  print('  SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash)')
  print('  void finishUpdateVerification(string sessionId)')
  print('  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)')
  print('   getAcceptedProximityMatches(string sessionId)')
  print('   getActiveBuddySubscriberIds()')
  print('   getAllContactIds()')
  print('  AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName)')
  print('   getBlockedContactIds()')
  print('   getBlockedContactIdsByRange(i32 start, i32 count)')
  print('   getBlockedRecommendationIds()')
  print('   getBuddyBlockerIds()')
  print('  Geolocation getBuddyLocation(string mid, i32 index)')
  print('   getCompactContactsModifiedSince(i64 timestamp)')
  print('  Group getCompactGroup(string groupId)')
  print('  Room getCompactRoom(string roomId)')
  print('  Contact getContact(string id)')
  print('   getContacts( ids)')
  print('  string getCountryWithRequestIp()')
  print('  string getRecentFriendRequests()')
  print('   getFavoriteMids()')
  print('  Group getGroup(string groupId)')
  print('   getGroupIdsInvited()')
  print('   getGroupIdsJoined()')
  print('   getGroups( groupIds)')
  print('   getHiddenContactMids()')
  print('  string getIdentityIdentifier()')
  print('  i32 getLastAnnouncementIndex()')
  print('  i64 getLastOpRevision()')
  print('  TMessageBox getMessageBox(string channelId, string messageBoxId, i32 lastMessagesCount)')
  print('  TMessageBoxWrapUp getMessageBoxCompactWrapUp(string mid)')
  print('  TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(i32 start, i32 messageBoxCount)')
  print('   getMessageBoxList(string channelId, i32 lastMessagesCount)')
  print('   getMessageBoxListByStatus(string channelId, i32 lastMessagesCount, i32 status)')
  print('  TMessageBoxWrapUp getMessageBoxWrapUp(string mid)')
  print('  TMessageBoxWrapUpResponse getMessageBoxWrapUpList(i32 start, i32 messageBoxCount)')
  print('   getMessagesBySequenceNumber(string channelId, string messageBoxId, i64 startSeq, i64 endSeq)')
  print('   getNextMessages(string messageBoxId, i64 startSeq, i32 messagesCount)')
  print('   getNotificationPolicy(CarrierCode carrier)')
  print('   getPreviousMessages(string messageBoxId, i64 endSeq, i32 messagesCount)')
  print('  Profile getProfile()')
  print('  ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId)')
  print('   getProximityMatchCandidates(string sessionId)')
  print('   getRecentMessages(string messageBoxId, i32 messagesCount)')
  print('   getRecommendationIds()')
  print('  Room getRoom(string roomId)')
  print('  RSAKey getRSAKeyInfo(IdentityProvider provider)')
  print('  i64 getServerTime()')
  print('   getSessions()')
  print('  Settings getSettings()')
  print('  Settings getSettingsAttributes(i32 attrBitset)')
  print('  SystemConfiguration getSystemConfiguration()')
  print('  Ticket getUserTicket()')
  print('  WapInvitation getWapInvitation(string invitationHash)')
  print('  void invalidateUserTicket()')
  print('  void inviteFriendsBySms( phoneNumberList)')
  print('  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)')
  print('  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)')
  print('  void inviteViaEmail(i32 reqSeq, string email, string name)')
  print('  bool isIdentityIdentifierAvailable(IdentityProvider provider, string identifier)')
  print('  bool isUseridAvailable(string userid)')
  print('  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)')
  print('  void leaveGroup(i32 reqSeq, string groupId)')
  print('  void leaveRoom(i32 reqSeq, string roomId)')
  print('  string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)')
  print('  LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)')
  print('  string loginWithVerifier(string verifier)')
  print('  LoginResult loginWithVerifierForCerificate(string verifier)')
  print('  LoginResult loginWithVerifierForCertificate(string verifier)')
  print('  LoginResult loginZ(loginRequest LoginRequest)')
  print('  void logout()')
  print('  void logoutSession(string tokenKey)')
  print('  void noop()')
  print('  void notifiedRedirect( paramMap)')
  print('   notifyBuddyOnAir(i32 seq,  receiverMids)')
  print('  void notifyIndividualEvent(NotificationStatus notificationStatus,  receiverMids)')
  print('  void notifyInstalled(string udidHash, string applicationTypeWithExtensions)')
  print('  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)')
  print('  void notifySleep(i64 lastRev, i32 badge)')
  print('  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo)')
  print('  string openProximityMatch(Location location)')
  print('  string registerBuddyUser(string buddyId, string registrarPassword)')
  print('  void registerBuddyUserid(i32 seq, string userid)')
  print('  string registerDevice(string sessionId)')
  print('  string registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier)')
  print('  string registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo)')
  print('  string registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid)')
  print('  bool registerUserid(i32 reqSeq, string userid)')
  print('  string registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)')
  print('  string registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)')
  print('  RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)')
  print('  string registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)')
  print('  string reissueDeviceCredential()')
  print('  string reissueUserTicket(i64 expirationTime, i32 maxUseCount)')
  print('  string reissueGroupTicket(string groupId)')
  print('  void rejectGroupInvitation(i32 reqSeq, string groupId)')
  print('  void releaseSession()')
  print('  void removeAllMessages(i32 seq, string lastMessageId)')
  print('  void removeBuddyLocation(string mid, i32 index)')
  print('  bool removeMessage(string messageId)')
  print('  bool removeMessageFromMyHome(string messageId)')
  print('  string removeSnsId(SnsIdType snsIdType)')
  print('  void report(i64 syncOpRevision, SyncCategory category, string report)')
  print('   reportContacts(i64 syncOpRevision, SyncCategory category,  contactReports, SyncActionType actionType)')
  print('  void reportGroups(i64 syncOpRevision,  groups)')
  print('  void reportProfile(i64 syncOpRevision, Profile profile)')
  print('  void reportRooms(i64 syncOpRevision,  rooms)')
  print('  void reportSettings(i64 syncOpRevision, Settings settings)')
  print('  void reportSpammer(string spammerMid,  spammerReasons,  spamMessageIds)')
  print('  void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)')
  print('  EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation)')
  print('  void requestIdentityUnbind(IdentityProvider provider, string identifier)')
  print('  EmailConfirmationSession resendEmailConfirmation(string verifier)')
  print('  void resendPinCode(string sessionId)')
  print('  void resendPinCodeBySMS(string sessionId)')
  print('  void sendChatChecked(i32 seq, string consumer, string lastMessageId)')
  print('  void sendChatRemoved(i32 seq, string consumer, string lastMessageId)')
  print('   sendContentPreviewUpdated(i32 esq, string messageId,  receiverMids)')
  print('  void sendContentReceipt(i32 seq, string consumer, string messageId)')
  print('  void sendDummyPush()')
  print('  Message sendEvent(i32 seq, Message message)')
  print('  Message sendMessage(i32 seq, Message message)')
  print('  void sendMessageIgnored(i32 seq, string consumer,  messageIds)')
  print('  void sendMessageReceipt(i32 seq, string consumer,  messageIds)')
  print('  Message sendMessageToMyHome(i32 seq, Message message)')
  print('  void setBuddyLocation(string mid, i32 index, Geolocation location)')
  print('  void setIdentityCredential(IdentityProvider provider, string identifier, string verifier)')
  print('  void setNotificationsEnabled(i32 reqSeq, MIDType type, string target, bool enablement)')
  print('  VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)')
  print('  VerificationSessionData startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale)')
  print('  void storeUpdateProfileAttribute(i32 seq, ProfileAttribute profileAttribute, string value)')
  print('   syncContactBySnsIds(i32 reqSeq,  modifications)')
  print('   syncContacts(i32 reqSeq,  localContacts)')
  print('  Message trySendMessage(i32 seq, Message message)')
  print('  void unblockContact(i32 reqSeq, string id)')
  print('  void unblockRecommendation(i32 reqSeq, string id)')
  print('  string unregisterUserAndDevice()')
  print('  void updateApnsDeviceToken(string apnsDeviceToken)')
  print('  void updateBuddySetting(string key, string value)')
  print('  void updateC2DMRegistrationId(string registrationId)')
  print('  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)')
  print('  void updateCustomModeSettings(CustomMode customMode,  paramMap)')
  print('  void updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo)')
  print('  void updateGroup(i32 reqSeq, Group group)')
  print('  void updateNotificationToken(NotificationType type, string token)')
  print('  void updateNotificationTokenWithBytes(NotificationType type, string token)')
  print('  void updateProfile(i32 reqSeq, Profile profile)')
  print('  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)')
  print('  void updateRegion(string region)')
  print('  void updateSettings(i32 reqSeq, Settings settings)')
  print('  i32 updateSettings2(i32 reqSeq, Settings settings)')
  print('  void updateSettingsAttribute(i32 reqSeq, SettingsAttribute attr, string value)')
  print('  i32 updateSettingsAttributes(i32 reqSeq, i32 attrBitset, Settings settings)')
  print('  void verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password)')
  print('  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential)')
  print('  VerificationResult verifyPhone(string sessionId, string pinCode, string udidHash)')
  print('  string verifyQrcode(string verifier, string pinCode)')
  print('  void notify(GlobalEvent event)')
  print('  bool inviteIntoGroupCall(string groupId,  contactIds)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = LineService.Client(protocol)
transport.open()

if cmd == 'getRSAKey':
  if len(args) != 0:
    print('getRSAKey requires 0 args')
    sys.exit(1)
  pp.pprint(client.getRSAKey())

elif cmd == 'notifyEmailConfirmationResult':
  if len(args) != 1:
    print('notifyEmailConfirmationResult requires 1 args')
    sys.exit(1)
  pp.pprint(client.notifyEmailConfirmationResult(eval(args[0]),))

elif cmd == 'registerVirtualAccount':
  if len(args) != 3:
    print('registerVirtualAccount requires 3 args')
    sys.exit(1)
  pp.pprint(client.registerVirtualAccount(args[0],args[1],args[2],))

elif cmd == 'requestVirtualAccountPasswordChange':
  if len(args) != 4:
    print('requestVirtualAccountPasswordChange requires 4 args')
    sys.exit(1)
  pp.pprint(client.requestVirtualAccountPasswordChange(args[0],args[1],args[2],args[3],))

elif cmd == 'requestVirtualAccountPasswordSet':
  if len(args) != 3:
    print('requestVirtualAccountPasswordSet requires 3 args')
    sys.exit(1)
  pp.pprint(client.requestVirtualAccountPasswordSet(args[0],args[1],args[2],))

elif cmd == 'unregisterVirtualAccount':
  if len(args) != 1:
    print('unregisterVirtualAccount requires 1 args')
    sys.exit(1)
  pp.pprint(client.unregisterVirtualAccount(args[0],))

elif cmd == 'checkUserAge':
  if len(args) != 4:
    print('checkUserAge requires 4 args')
    sys.exit(1)
  pp.pprint(client.checkUserAge(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'checkUserAgeWithDocomo':
  if len(args) != 3:
    print('checkUserAgeWithDocomo requires 3 args')
    sys.exit(1)
  pp.pprint(client.checkUserAgeWithDocomo(args[0],eval(args[1]),args[2],))

elif cmd == 'retrieveOpenIdAuthUrlWithDocomo':
  if len(args) != 0:
    print('retrieveOpenIdAuthUrlWithDocomo requires 0 args')
    sys.exit(1)
  pp.pprint(client.retrieveOpenIdAuthUrlWithDocomo())

elif cmd == 'retrieveRequestToken':
  if len(args) != 1:
    print('retrieveRequestToken requires 1 args')
    sys.exit(1)
  pp.pprint(client.retrieveRequestToken(eval(args[0]),))

elif cmd == 'addBuddyMember':
  if len(args) != 2:
    print('addBuddyMember requires 2 args')
    sys.exit(1)
  pp.pprint(client.addBuddyMember(args[0],args[1],))

elif cmd == 'addBuddyMembers':
  if len(args) != 2:
    print('addBuddyMembers requires 2 args')
    sys.exit(1)
  pp.pprint(client.addBuddyMembers(args[0],eval(args[1]),))

elif cmd == 'blockBuddyMember':
  if len(args) != 2:
    print('blockBuddyMember requires 2 args')
    sys.exit(1)
  pp.pprint(client.blockBuddyMember(args[0],args[1],))

elif cmd == 'commitSendMessagesToAll':
  if len(args) != 1:
    print('commitSendMessagesToAll requires 1 args')
    sys.exit(1)
  pp.pprint(client.commitSendMessagesToAll(eval(args[0]),))

elif cmd == 'commitSendMessagesToMids':
  if len(args) != 2:
    print('commitSendMessagesToMids requires 2 args')
    sys.exit(1)
  pp.pprint(client.commitSendMessagesToMids(eval(args[0]),eval(args[1]),))

elif cmd == 'containsBuddyMember':
  if len(args) != 2:
    print('containsBuddyMember requires 2 args')
    sys.exit(1)
  pp.pprint(client.containsBuddyMember(args[0],args[1],))

elif cmd == 'downloadMessageContent':
  if len(args) != 2:
    print('downloadMessageContent requires 2 args')
    sys.exit(1)
  pp.pprint(client.downloadMessageContent(args[0],args[1],))

elif cmd == 'downloadMessageContentPreview':
  if len(args) != 2:
    print('downloadMessageContentPreview requires 2 args')
    sys.exit(1)
  pp.pprint(client.downloadMessageContentPreview(args[0],args[1],))

elif cmd == 'downloadProfileImage':
  if len(args) != 1:
    print('downloadProfileImage requires 1 args')
    sys.exit(1)
  pp.pprint(client.downloadProfileImage(args[0],))

elif cmd == 'downloadProfileImagePreview':
  if len(args) != 1:
    print('downloadProfileImagePreview requires 1 args')
    sys.exit(1)
  pp.pprint(client.downloadProfileImagePreview(args[0],))

elif cmd == 'getActiveMemberCountByBuddyMid':
  if len(args) != 1:
    print('getActiveMemberCountByBuddyMid requires 1 args')
    sys.exit(1)
  pp.pprint(client.getActiveMemberCountByBuddyMid(args[0],))

elif cmd == 'getActiveMemberMidsByBuddyMid':
  if len(args) != 1:
    print('getActiveMemberMidsByBuddyMid requires 1 args')
    sys.exit(1)
  pp.pprint(client.getActiveMemberMidsByBuddyMid(args[0],))

elif cmd == 'getAllBuddyMembers':
  if len(args) != 0:
    print('getAllBuddyMembers requires 0 args')
    sys.exit(1)
  pp.pprint(client.getAllBuddyMembers())

elif cmd == 'getBlockedBuddyMembers':
  if len(args) != 0:
    print('getBlockedBuddyMembers requires 0 args')
    sys.exit(1)
  pp.pprint(client.getBlockedBuddyMembers())

elif cmd == 'getBlockerCountByBuddyMid':
  if len(args) != 1:
    print('getBlockerCountByBuddyMid requires 1 args')
    sys.exit(1)
  pp.pprint(client.getBlockerCountByBuddyMid(args[0],))

elif cmd == 'getBuddyDetailByMid':
  if len(args) != 1:
    print('getBuddyDetailByMid requires 1 args')
    sys.exit(1)
  pp.pprint(client.getBuddyDetailByMid(args[0],))

elif cmd == 'getBuddyProfile':
  if len(args) != 0:
    print('getBuddyProfile requires 0 args')
    sys.exit(1)
  pp.pprint(client.getBuddyProfile())

elif cmd == 'getContactTicket':
  if len(args) != 0:
    print('getContactTicket requires 0 args')
    sys.exit(1)
  pp.pprint(client.getContactTicket())

elif cmd == 'getMemberCountByBuddyMid':
  if len(args) != 1:
    print('getMemberCountByBuddyMid requires 1 args')
    sys.exit(1)
  pp.pprint(client.getMemberCountByBuddyMid(args[0],))

elif cmd == 'getSendBuddyMessageResult':
  if len(args) != 1:
    print('getSendBuddyMessageResult requires 1 args')
    sys.exit(1)
  pp.pprint(client.getSendBuddyMessageResult(args[0],))

elif cmd == 'getSetBuddyOnAirResult':
  if len(args) != 1:
    print('getSetBuddyOnAirResult requires 1 args')
    sys.exit(1)
  pp.pprint(client.getSetBuddyOnAirResult(args[0],))

elif cmd == 'getUpdateBuddyProfileResult':
  if len(args) != 1:
    print('getUpdateBuddyProfileResult requires 1 args')
    sys.exit(1)
  pp.pprint(client.getUpdateBuddyProfileResult(args[0],))

elif cmd == 'isBuddyOnAirByMid':
  if len(args) != 1:
    print('isBuddyOnAirByMid requires 1 args')
    sys.exit(1)
  pp.pprint(client.isBuddyOnAirByMid(args[0],))

elif cmd == 'linkAndSendBuddyContentMessageToAllAsync':
  if len(args) != 3:
    print('linkAndSendBuddyContentMessageToAllAsync requires 3 args')
    sys.exit(1)
  pp.pprint(client.linkAndSendBuddyContentMessageToAllAsync(args[0],eval(args[1]),args[2],))

elif cmd == 'linkAndSendBuddyContentMessageToMids':
  if len(args) != 4:
    print('linkAndSendBuddyContentMessageToMids requires 4 args')
    sys.exit(1)
  pp.pprint(client.linkAndSendBuddyContentMessageToMids(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'notifyBuddyBlocked':
  if len(args) != 2:
    print('notifyBuddyBlocked requires 2 args')
    sys.exit(1)
  pp.pprint(client.notifyBuddyBlocked(args[0],args[1],))

elif cmd == 'notifyBuddyUnblocked':
  if len(args) != 2:
    print('notifyBuddyUnblocked requires 2 args')
    sys.exit(1)
  pp.pprint(client.notifyBuddyUnblocked(args[0],args[1],))

elif cmd == 'registerBuddy':
  if len(args) != 6:
    print('registerBuddy requires 6 args')
    sys.exit(1)
  pp.pprint(client.registerBuddy(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'registerBuddyAdmin':
  if len(args) != 5:
    print('registerBuddyAdmin requires 5 args')
    sys.exit(1)
  pp.pprint(client.registerBuddyAdmin(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'reissueContactTicket':
  if len(args) != 2:
    print('reissueContactTicket requires 2 args')
    sys.exit(1)
  pp.pprint(client.reissueContactTicket(eval(args[0]),eval(args[1]),))

elif cmd == 'removeBuddyMember':
  if len(args) != 2:
    print('removeBuddyMember requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeBuddyMember(args[0],args[1],))

elif cmd == 'removeBuddyMembers':
  if len(args) != 2:
    print('removeBuddyMembers requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeBuddyMembers(args[0],eval(args[1]),))

elif cmd == 'sendBuddyContentMessageToAll':
  if len(args) != 3:
    print('sendBuddyContentMessageToAll requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendBuddyContentMessageToAll(args[0],eval(args[1]),args[2],))

elif cmd == 'sendBuddyContentMessageToAllAsync':
  if len(args) != 3:
    print('sendBuddyContentMessageToAllAsync requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendBuddyContentMessageToAllAsync(args[0],eval(args[1]),args[2],))

elif cmd == 'sendBuddyContentMessageToMids':
  if len(args) != 4:
    print('sendBuddyContentMessageToMids requires 4 args')
    sys.exit(1)
  pp.pprint(client.sendBuddyContentMessageToMids(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'sendBuddyContentMessageToMidsAsync':
  if len(args) != 4:
    print('sendBuddyContentMessageToMidsAsync requires 4 args')
    sys.exit(1)
  pp.pprint(client.sendBuddyContentMessageToMidsAsync(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'sendBuddyMessageToAll':
  if len(args) != 2:
    print('sendBuddyMessageToAll requires 2 args')
    sys.exit(1)
  pp.pprint(client.sendBuddyMessageToAll(args[0],eval(args[1]),))

elif cmd == 'sendBuddyMessageToAllAsync':
  if len(args) != 2:
    print('sendBuddyMessageToAllAsync requires 2 args')
    sys.exit(1)
  pp.pprint(client.sendBuddyMessageToAllAsync(args[0],eval(args[1]),))

elif cmd == 'sendBuddyMessageToMids':
  if len(args) != 3:
    print('sendBuddyMessageToMids requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendBuddyMessageToMids(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'sendBuddyMessageToMidsAsync':
  if len(args) != 3:
    print('sendBuddyMessageToMidsAsync requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendBuddyMessageToMidsAsync(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'sendIndividualEventToAllAsync':
  if len(args) != 3:
    print('sendIndividualEventToAllAsync requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendIndividualEventToAllAsync(args[0],args[1],eval(args[2]),))

elif cmd == 'setBuddyOnAir':
  if len(args) != 2:
    print('setBuddyOnAir requires 2 args')
    sys.exit(1)
  pp.pprint(client.setBuddyOnAir(args[0],eval(args[1]),))

elif cmd == 'setBuddyOnAirAsync':
  if len(args) != 2:
    print('setBuddyOnAirAsync requires 2 args')
    sys.exit(1)
  pp.pprint(client.setBuddyOnAirAsync(args[0],eval(args[1]),))

elif cmd == 'storeMessage':
  if len(args) != 2:
    print('storeMessage requires 2 args')
    sys.exit(1)
  pp.pprint(client.storeMessage(args[0],eval(args[1]),))

elif cmd == 'unblockBuddyMember':
  if len(args) != 2:
    print('unblockBuddyMember requires 2 args')
    sys.exit(1)
  pp.pprint(client.unblockBuddyMember(args[0],args[1],))

elif cmd == 'unregisterBuddy':
  if len(args) != 1:
    print('unregisterBuddy requires 1 args')
    sys.exit(1)
  pp.pprint(client.unregisterBuddy(args[0],))

elif cmd == 'unregisterBuddyAdmin':
  if len(args) != 1:
    print('unregisterBuddyAdmin requires 1 args')
    sys.exit(1)
  pp.pprint(client.unregisterBuddyAdmin(args[0],))

elif cmd == 'updateBuddyAdminProfileAttribute':
  if len(args) != 2:
    print('updateBuddyAdminProfileAttribute requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateBuddyAdminProfileAttribute(args[0],eval(args[1]),))

elif cmd == 'updateBuddyAdminProfileImage':
  if len(args) != 2:
    print('updateBuddyAdminProfileImage requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateBuddyAdminProfileImage(args[0],args[1],))

elif cmd == 'updateBuddyProfileAttributes':
  if len(args) != 2:
    print('updateBuddyProfileAttributes requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateBuddyProfileAttributes(args[0],eval(args[1]),))

elif cmd == 'updateBuddyProfileAttributesAsync':
  if len(args) != 2:
    print('updateBuddyProfileAttributesAsync requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateBuddyProfileAttributesAsync(args[0],eval(args[1]),))

elif cmd == 'updateBuddyProfileImage':
  if len(args) != 2:
    print('updateBuddyProfileImage requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateBuddyProfileImage(args[0],args[1],))

elif cmd == 'updateBuddyProfileImageAsync':
  if len(args) != 2:
    print('updateBuddyProfileImageAsync requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateBuddyProfileImageAsync(args[0],args[1],))

elif cmd == 'updateBuddySearchId':
  if len(args) != 2:
    print('updateBuddySearchId requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateBuddySearchId(args[0],args[1],))

elif cmd == 'updateBuddySettings':
  if len(args) != 1:
    print('updateBuddySettings requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateBuddySettings(eval(args[0]),))

elif cmd == 'uploadBuddyContent':
  if len(args) != 2:
    print('uploadBuddyContent requires 2 args')
    sys.exit(1)
  pp.pprint(client.uploadBuddyContent(eval(args[0]),args[1],))

elif cmd == 'findBuddyContactsByQuery':
  if len(args) != 6:
    print('findBuddyContactsByQuery requires 6 args')
    sys.exit(1)
  pp.pprint(client.findBuddyContactsByQuery(args[0],args[1],args[2],eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'getBuddyContacts':
  if len(args) != 5:
    print('getBuddyContacts requires 5 args')
    sys.exit(1)
  pp.pprint(client.getBuddyContacts(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'getBuddyDetail':
  if len(args) != 1:
    print('getBuddyDetail requires 1 args')
    sys.exit(1)
  pp.pprint(client.getBuddyDetail(args[0],))

elif cmd == 'getBuddyOnAir':
  if len(args) != 1:
    print('getBuddyOnAir requires 1 args')
    sys.exit(1)
  pp.pprint(client.getBuddyOnAir(args[0],))

elif cmd == 'getCountriesHavingBuddy':
  if len(args) != 0:
    print('getCountriesHavingBuddy requires 0 args')
    sys.exit(1)
  pp.pprint(client.getCountriesHavingBuddy())

elif cmd == 'getNewlyReleasedBuddyIds':
  if len(args) != 1:
    print('getNewlyReleasedBuddyIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.getNewlyReleasedBuddyIds(args[0],))

elif cmd == 'getPopularBuddyBanner':
  if len(args) != 4:
    print('getPopularBuddyBanner requires 4 args')
    sys.exit(1)
  pp.pprint(client.getPopularBuddyBanner(args[0],args[1],eval(args[2]),args[3],))

elif cmd == 'getPopularBuddyLists':
  if len(args) != 2:
    print('getPopularBuddyLists requires 2 args')
    sys.exit(1)
  pp.pprint(client.getPopularBuddyLists(args[0],args[1],))

elif cmd == 'getPromotedBuddyContacts':
  if len(args) != 2:
    print('getPromotedBuddyContacts requires 2 args')
    sys.exit(1)
  pp.pprint(client.getPromotedBuddyContacts(args[0],args[1],))

elif cmd == 'activeBuddySubscriberCount':
  if len(args) != 0:
    print('activeBuddySubscriberCount requires 0 args')
    sys.exit(1)
  pp.pprint(client.activeBuddySubscriberCount())

elif cmd == 'addOperationForChannel':
  if len(args) != 4:
    print('addOperationForChannel requires 4 args')
    sys.exit(1)
  pp.pprint(client.addOperationForChannel(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'displayBuddySubscriberCount':
  if len(args) != 0:
    print('displayBuddySubscriberCount requires 0 args')
    sys.exit(1)
  pp.pprint(client.displayBuddySubscriberCount())

elif cmd == 'findContactByUseridWithoutAbuseBlockForChannel':
  if len(args) != 1:
    print('findContactByUseridWithoutAbuseBlockForChannel requires 1 args')
    sys.exit(1)
  pp.pprint(client.findContactByUseridWithoutAbuseBlockForChannel(args[0],))

elif cmd == 'getAllContactIdsForChannel':
  if len(args) != 0:
    print('getAllContactIdsForChannel requires 0 args')
    sys.exit(1)
  pp.pprint(client.getAllContactIdsForChannel())

elif cmd == 'getCompactContacts':
  if len(args) != 1:
    print('getCompactContacts requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCompactContacts(eval(args[0]),))

elif cmd == 'getContactsForChannel':
  if len(args) != 1:
    print('getContactsForChannel requires 1 args')
    sys.exit(1)
  pp.pprint(client.getContactsForChannel(eval(args[0]),))

elif cmd == 'getDisplayName':
  if len(args) != 1:
    print('getDisplayName requires 1 args')
    sys.exit(1)
  pp.pprint(client.getDisplayName(args[0],))

elif cmd == 'getFavoriteMidsForChannel':
  if len(args) != 0:
    print('getFavoriteMidsForChannel requires 0 args')
    sys.exit(1)
  pp.pprint(client.getFavoriteMidsForChannel())

elif cmd == 'getFriendMids':
  if len(args) != 0:
    print('getFriendMids requires 0 args')
    sys.exit(1)
  pp.pprint(client.getFriendMids())

elif cmd == 'getGroupMemberMids':
  if len(args) != 1:
    print('getGroupMemberMids requires 1 args')
    sys.exit(1)
  pp.pprint(client.getGroupMemberMids(args[0],))

elif cmd == 'getGroupsForChannel':
  if len(args) != 1:
    print('getGroupsForChannel requires 1 args')
    sys.exit(1)
  pp.pprint(client.getGroupsForChannel(eval(args[0]),))

elif cmd == 'getIdentityCredential':
  if len(args) != 0:
    print('getIdentityCredential requires 0 args')
    sys.exit(1)
  pp.pprint(client.getIdentityCredential())

elif cmd == 'getJoinedGroupIdsForChannel':
  if len(args) != 0:
    print('getJoinedGroupIdsForChannel requires 0 args')
    sys.exit(1)
  pp.pprint(client.getJoinedGroupIdsForChannel())

elif cmd == 'getMetaProfile':
  if len(args) != 0:
    print('getMetaProfile requires 0 args')
    sys.exit(1)
  pp.pprint(client.getMetaProfile())

elif cmd == 'getMid':
  if len(args) != 0:
    print('getMid requires 0 args')
    sys.exit(1)
  pp.pprint(client.getMid())

elif cmd == 'getPrimaryClientForChannel':
  if len(args) != 0:
    print('getPrimaryClientForChannel requires 0 args')
    sys.exit(1)
  pp.pprint(client.getPrimaryClientForChannel())

elif cmd == 'getProfileForChannel':
  if len(args) != 0:
    print('getProfileForChannel requires 0 args')
    sys.exit(1)
  pp.pprint(client.getProfileForChannel())

elif cmd == 'getSimpleChannelContacts':
  if len(args) != 1:
    print('getSimpleChannelContacts requires 1 args')
    sys.exit(1)
  pp.pprint(client.getSimpleChannelContacts(eval(args[0]),))

elif cmd == 'getUserCountryForBilling':
  if len(args) != 2:
    print('getUserCountryForBilling requires 2 args')
    sys.exit(1)
  pp.pprint(client.getUserCountryForBilling(args[0],args[1],))

elif cmd == 'getUserCreateTime':
  if len(args) != 0:
    print('getUserCreateTime requires 0 args')
    sys.exit(1)
  pp.pprint(client.getUserCreateTime())

elif cmd == 'getUserIdentities':
  if len(args) != 0:
    print('getUserIdentities requires 0 args')
    sys.exit(1)
  pp.pprint(client.getUserIdentities())

elif cmd == 'getUserLanguage':
  if len(args) != 0:
    print('getUserLanguage requires 0 args')
    sys.exit(1)
  pp.pprint(client.getUserLanguage())

elif cmd == 'getUserMidsWhoAddedMe':
  if len(args) != 0:
    print('getUserMidsWhoAddedMe requires 0 args')
    sys.exit(1)
  pp.pprint(client.getUserMidsWhoAddedMe())

elif cmd == 'isGroupMember':
  if len(args) != 1:
    print('isGroupMember requires 1 args')
    sys.exit(1)
  pp.pprint(client.isGroupMember(args[0],))

elif cmd == 'isInContact':
  if len(args) != 1:
    print('isInContact requires 1 args')
    sys.exit(1)
  pp.pprint(client.isInContact(args[0],))

elif cmd == 'registerChannelCP':
  if len(args) != 2:
    print('registerChannelCP requires 2 args')
    sys.exit(1)
  pp.pprint(client.registerChannelCP(args[0],args[1],))

elif cmd == 'removeNotificationStatus':
  if len(args) != 1:
    print('removeNotificationStatus requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeNotificationStatus(eval(args[0]),))

elif cmd == 'sendMessageForChannel':
  if len(args) != 1:
    print('sendMessageForChannel requires 1 args')
    sys.exit(1)
  pp.pprint(client.sendMessageForChannel(eval(args[0]),))

elif cmd == 'sendPinCodeOperation':
  if len(args) != 1:
    print('sendPinCodeOperation requires 1 args')
    sys.exit(1)
  pp.pprint(client.sendPinCodeOperation(args[0],))

elif cmd == 'updateProfileAttributeForChannel':
  if len(args) != 2:
    print('updateProfileAttributeForChannel requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateProfileAttributeForChannel(eval(args[0]),args[1],))

elif cmd == 'approveChannelAndIssueChannelToken':
  if len(args) != 1:
    print('approveChannelAndIssueChannelToken requires 1 args')
    sys.exit(1)
  pp.pprint(client.approveChannelAndIssueChannelToken(args[0],))

elif cmd == 'approveChannelAndIssueRequestToken':
  if len(args) != 2:
    print('approveChannelAndIssueRequestToken requires 2 args')
    sys.exit(1)
  pp.pprint(client.approveChannelAndIssueRequestToken(args[0],args[1],))

elif cmd == 'fetchNotificationItems':
  if len(args) != 1:
    print('fetchNotificationItems requires 1 args')
    sys.exit(1)
  pp.pprint(client.fetchNotificationItems(eval(args[0]),))

elif cmd == 'getApprovedChannels':
  if len(args) != 2:
    print('getApprovedChannels requires 2 args')
    sys.exit(1)
  pp.pprint(client.getApprovedChannels(eval(args[0]),args[1],))

elif cmd == 'getChannelInfo':
  if len(args) != 2:
    print('getChannelInfo requires 2 args')
    sys.exit(1)
  pp.pprint(client.getChannelInfo(args[0],args[1],))

elif cmd == 'getChannelNotificationSetting':
  if len(args) != 2:
    print('getChannelNotificationSetting requires 2 args')
    sys.exit(1)
  pp.pprint(client.getChannelNotificationSetting(args[0],args[1],))

elif cmd == 'getChannelNotificationSettings':
  if len(args) != 1:
    print('getChannelNotificationSettings requires 1 args')
    sys.exit(1)
  pp.pprint(client.getChannelNotificationSettings(args[0],))

elif cmd == 'getChannels':
  if len(args) != 2:
    print('getChannels requires 2 args')
    sys.exit(1)
  pp.pprint(client.getChannels(eval(args[0]),args[1],))

elif cmd == 'getDomains':
  if len(args) != 1:
    print('getDomains requires 1 args')
    sys.exit(1)
  pp.pprint(client.getDomains(eval(args[0]),))

elif cmd == 'getFriendChannelMatrices':
  if len(args) != 1:
    print('getFriendChannelMatrices requires 1 args')
    sys.exit(1)
  pp.pprint(client.getFriendChannelMatrices(eval(args[0]),))

elif cmd == 'getNotificationBadgeCount':
  if len(args) != 1:
    print('getNotificationBadgeCount requires 1 args')
    sys.exit(1)
  pp.pprint(client.getNotificationBadgeCount(eval(args[0]),))

elif cmd == 'issueChannelToken':
  if len(args) != 1:
    print('issueChannelToken requires 1 args')
    sys.exit(1)
  pp.pprint(client.issueChannelToken(args[0],))

elif cmd == 'issueRequestToken':
  if len(args) != 2:
    print('issueRequestToken requires 2 args')
    sys.exit(1)
  pp.pprint(client.issueRequestToken(args[0],args[1],))

elif cmd == 'issueRequestTokenWithAuthScheme':
  if len(args) != 4:
    print('issueRequestTokenWithAuthScheme requires 4 args')
    sys.exit(1)
  pp.pprint(client.issueRequestTokenWithAuthScheme(args[0],args[1],eval(args[2]),args[3],))

elif cmd == 'reserveCoinUse':
  if len(args) != 2:
    print('reserveCoinUse requires 2 args')
    sys.exit(1)
  pp.pprint(client.reserveCoinUse(eval(args[0]),args[1],))

elif cmd == 'revokeChannel':
  if len(args) != 1:
    print('revokeChannel requires 1 args')
    sys.exit(1)
  pp.pprint(client.revokeChannel(args[0],))

elif cmd == 'syncChannelData':
  if len(args) != 2:
    print('syncChannelData requires 2 args')
    sys.exit(1)
  pp.pprint(client.syncChannelData(eval(args[0]),args[1],))

elif cmd == 'updateChannelNotificationSetting':
  if len(args) != 1:
    print('updateChannelNotificationSetting requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateChannelNotificationSetting(eval(args[0]),))

elif cmd == 'fetchMessageOperations':
  if len(args) != 3:
    print('fetchMessageOperations requires 3 args')
    sys.exit(1)
  pp.pprint(client.fetchMessageOperations(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getLastReadMessageIds':
  if len(args) != 1:
    print('getLastReadMessageIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.getLastReadMessageIds(args[0],))

elif cmd == 'multiGetLastReadMessageIds':
  if len(args) != 1:
    print('multiGetLastReadMessageIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.multiGetLastReadMessageIds(eval(args[0]),))

elif cmd == 'buyCoinProduct':
  if len(args) != 1:
    print('buyCoinProduct requires 1 args')
    sys.exit(1)
  pp.pprint(client.buyCoinProduct(eval(args[0]),))

elif cmd == 'buyFreeProduct':
  if len(args) != 6:
    print('buyFreeProduct requires 6 args')
    sys.exit(1)
  pp.pprint(client.buyFreeProduct(args[0],args[1],eval(args[2]),args[3],args[4],eval(args[5]),))

elif cmd == 'buyMustbuyProduct':
  if len(args) != 7:
    print('buyMustbuyProduct requires 7 args')
    sys.exit(1)
  pp.pprint(client.buyMustbuyProduct(args[0],args[1],eval(args[2]),args[3],args[4],eval(args[5]),args[6],))

elif cmd == 'checkCanReceivePresent':
  if len(args) != 4:
    print('checkCanReceivePresent requires 4 args')
    sys.exit(1)
  pp.pprint(client.checkCanReceivePresent(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'getActivePurchases':
  if len(args) != 4:
    print('getActivePurchases requires 4 args')
    sys.exit(1)
  pp.pprint(client.getActivePurchases(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getActivePurchaseVersions':
  if len(args) != 4:
    print('getActivePurchaseVersions requires 4 args')
    sys.exit(1)
  pp.pprint(client.getActivePurchaseVersions(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getCoinProducts':
  if len(args) != 3:
    print('getCoinProducts requires 3 args')
    sys.exit(1)
  pp.pprint(client.getCoinProducts(eval(args[0]),args[1],args[2],))

elif cmd == 'getCoinProductsByPgCode':
  if len(args) != 4:
    print('getCoinProductsByPgCode requires 4 args')
    sys.exit(1)
  pp.pprint(client.getCoinProductsByPgCode(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getCoinPurchaseHistory':
  if len(args) != 1:
    print('getCoinPurchaseHistory requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCoinPurchaseHistory(eval(args[0]),))

elif cmd == 'getCoinUseAndRefundHistory':
  if len(args) != 1:
    print('getCoinUseAndRefundHistory requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCoinUseAndRefundHistory(eval(args[0]),))

elif cmd == 'getDownloads':
  if len(args) != 4:
    print('getDownloads requires 4 args')
    sys.exit(1)
  pp.pprint(client.getDownloads(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getEventPackages':
  if len(args) != 4:
    print('getEventPackages requires 4 args')
    sys.exit(1)
  pp.pprint(client.getEventPackages(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getNewlyReleasedPackages':
  if len(args) != 4:
    print('getNewlyReleasedPackages requires 4 args')
    sys.exit(1)
  pp.pprint(client.getNewlyReleasedPackages(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getPopularPackages':
  if len(args) != 4:
    print('getPopularPackages requires 4 args')
    sys.exit(1)
  pp.pprint(client.getPopularPackages(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getPresentsReceived':
  if len(args) != 4:
    print('getPresentsReceived requires 4 args')
    sys.exit(1)
  pp.pprint(client.getPresentsReceived(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getPresentsSent':
  if len(args) != 4:
    print('getPresentsSent requires 4 args')
    sys.exit(1)
  pp.pprint(client.getPresentsSent(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getProduct':
  if len(args) != 3:
    print('getProduct requires 3 args')
    sys.exit(1)
  pp.pprint(client.getProduct(eval(args[0]),args[1],args[2],))

elif cmd == 'getProductList':
  if len(args) != 3:
    print('getProductList requires 3 args')
    sys.exit(1)
  pp.pprint(client.getProductList(eval(args[0]),args[1],args[2],))

elif cmd == 'getProductListWithCarrier':
  if len(args) != 4:
    print('getProductListWithCarrier requires 4 args')
    sys.exit(1)
  pp.pprint(client.getProductListWithCarrier(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'getProductWithCarrier':
  if len(args) != 4:
    print('getProductWithCarrier requires 4 args')
    sys.exit(1)
  pp.pprint(client.getProductWithCarrier(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'getPurchaseHistory':
  if len(args) != 4:
    print('getPurchaseHistory requires 4 args')
    sys.exit(1)
  pp.pprint(client.getPurchaseHistory(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getTotalBalance':
  if len(args) != 1:
    print('getTotalBalance requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTotalBalance(eval(args[0]),))

elif cmd == 'notifyDownloaded':
  if len(args) != 2:
    print('notifyDownloaded requires 2 args')
    sys.exit(1)
  pp.pprint(client.notifyDownloaded(eval(args[0]),args[1],))

elif cmd == 'reserveCoinPurchase':
  if len(args) != 1:
    print('reserveCoinPurchase requires 1 args')
    sys.exit(1)
  pp.pprint(client.reserveCoinPurchase(eval(args[0]),))

elif cmd == 'reservePayment':
  if len(args) != 1:
    print('reservePayment requires 1 args')
    sys.exit(1)
  pp.pprint(client.reservePayment(eval(args[0]),))

elif cmd == 'getSnsFriends':
  if len(args) != 4:
    print('getSnsFriends requires 4 args')
    sys.exit(1)
  pp.pprint(client.getSnsFriends(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'getSnsMyProfile':
  if len(args) != 2:
    print('getSnsMyProfile requires 2 args')
    sys.exit(1)
  pp.pprint(client.getSnsMyProfile(eval(args[0]),args[1],))

elif cmd == 'postSnsInvitationMessage':
  if len(args) != 3:
    print('postSnsInvitationMessage requires 3 args')
    sys.exit(1)
  pp.pprint(client.postSnsInvitationMessage(eval(args[0]),args[1],args[2],))

elif cmd == 'acceptGroupInvitation':
  if len(args) != 2:
    print('acceptGroupInvitation requires 2 args')
    sys.exit(1)
  pp.pprint(client.acceptGroupInvitation(eval(args[0]),args[1],))

elif cmd == 'acceptGroupInvitationByTicket':
  if len(args) != 3:
    print('acceptGroupInvitationByTicket requires 3 args')
    sys.exit(1)
  pp.pprint(client.acceptGroupInvitationByTicket(eval(args[0]),args[1],args[2],))

elif cmd == 'acceptProximityMatches':
  if len(args) != 2:
    print('acceptProximityMatches requires 2 args')
    sys.exit(1)
  pp.pprint(client.acceptProximityMatches(args[0],eval(args[1]),))

elif cmd == 'acquireCallRoute':
  if len(args) != 1:
    print('acquireCallRoute requires 1 args')
    sys.exit(1)
  pp.pprint(client.acquireCallRoute(args[0],))

elif cmd == 'acquireCallTicket':
  if len(args) != 1:
    print('acquireCallTicket requires 1 args')
    sys.exit(1)
  pp.pprint(client.acquireCallTicket(args[0],))

elif cmd == 'acquireEncryptedAccessToken':
  if len(args) != 1:
    print('acquireEncryptedAccessToken requires 1 args')
    sys.exit(1)
  pp.pprint(client.acquireEncryptedAccessToken(eval(args[0]),))

elif cmd == 'addSnsId':
  if len(args) != 2:
    print('addSnsId requires 2 args')
    sys.exit(1)
  pp.pprint(client.addSnsId(eval(args[0]),args[1],))

elif cmd == 'blockContact':
  if len(args) != 2:
    print('blockContact requires 2 args')
    sys.exit(1)
  pp.pprint(client.blockContact(eval(args[0]),args[1],))

elif cmd == 'blockRecommendation':
  if len(args) != 2:
    print('blockRecommendation requires 2 args')
    sys.exit(1)
  pp.pprint(client.blockRecommendation(eval(args[0]),args[1],))

elif cmd == 'cancelGroupInvitation':
  if len(args) != 3:
    print('cancelGroupInvitation requires 3 args')
    sys.exit(1)
  pp.pprint(client.cancelGroupInvitation(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'changeVerificationMethod':
  if len(args) != 2:
    print('changeVerificationMethod requires 2 args')
    sys.exit(1)
  pp.pprint(client.changeVerificationMethod(args[0],eval(args[1]),))

elif cmd == 'clearIdentityCredential':
  if len(args) != 0:
    print('clearIdentityCredential requires 0 args')
    sys.exit(1)
  pp.pprint(client.clearIdentityCredential())

elif cmd == 'clearMessageBox':
  if len(args) != 2:
    print('clearMessageBox requires 2 args')
    sys.exit(1)
  pp.pprint(client.clearMessageBox(args[0],args[1],))

elif cmd == 'closeProximityMatch':
  if len(args) != 1:
    print('closeProximityMatch requires 1 args')
    sys.exit(1)
  pp.pprint(client.closeProximityMatch(args[0],))

elif cmd == 'commitSendMessage':
  if len(args) != 3:
    print('commitSendMessage requires 3 args')
    sys.exit(1)
  pp.pprint(client.commitSendMessage(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'commitSendMessages':
  if len(args) != 3:
    print('commitSendMessages requires 3 args')
    sys.exit(1)
  pp.pprint(client.commitSendMessages(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'commitUpdateProfile':
  if len(args) != 3:
    print('commitUpdateProfile requires 3 args')
    sys.exit(1)
  pp.pprint(client.commitUpdateProfile(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'confirmEmail':
  if len(args) != 2:
    print('confirmEmail requires 2 args')
    sys.exit(1)
  pp.pprint(client.confirmEmail(args[0],args[1],))

elif cmd == 'createGroup':
  if len(args) != 3:
    print('createGroup requires 3 args')
    sys.exit(1)
  pp.pprint(client.createGroup(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'createQrcodeBase64Image':
  if len(args) != 7:
    print('createQrcodeBase64Image requires 7 args')
    sys.exit(1)
  pp.pprint(client.createQrcodeBase64Image(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'createRoom':
  if len(args) != 2:
    print('createRoom requires 2 args')
    sys.exit(1)
  pp.pprint(client.createRoom(eval(args[0]),eval(args[1]),))

elif cmd == 'createSession':
  if len(args) != 0:
    print('createSession requires 0 args')
    sys.exit(1)
  pp.pprint(client.createSession())

elif cmd == 'fetchAnnouncements':
  if len(args) != 1:
    print('fetchAnnouncements requires 1 args')
    sys.exit(1)
  pp.pprint(client.fetchAnnouncements(eval(args[0]),))

elif cmd == 'fetchMessages':
  if len(args) != 2:
    print('fetchMessages requires 2 args')
    sys.exit(1)
  pp.pprint(client.fetchMessages(eval(args[0]),eval(args[1]),))

elif cmd == 'fetchOperations':
  if len(args) != 2:
    print('fetchOperations requires 2 args')
    sys.exit(1)
  pp.pprint(client.fetchOperations(eval(args[0]),eval(args[1]),))

elif cmd == 'fetchOps':
  if len(args) != 4:
    print('fetchOps requires 4 args')
    sys.exit(1)
  pp.pprint(client.fetchOps(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'findAndAddContactsByEmail':
  if len(args) != 2:
    print('findAndAddContactsByEmail requires 2 args')
    sys.exit(1)
  pp.pprint(client.findAndAddContactsByEmail(eval(args[0]),eval(args[1]),))

elif cmd == 'findAndAddContactsByMid':
  if len(args) != 2:
    print('findAndAddContactsByMid requires 2 args')
    sys.exit(1)
  pp.pprint(client.findAndAddContactsByMid(eval(args[0]),args[1],))

elif cmd == 'findAndAddContactsByPhone':
  if len(args) != 2:
    print('findAndAddContactsByPhone requires 2 args')
    sys.exit(1)
  pp.pprint(client.findAndAddContactsByPhone(eval(args[0]),eval(args[1]),))

elif cmd == 'findAndAddContactsByUserid':
  if len(args) != 2:
    print('findAndAddContactsByUserid requires 2 args')
    sys.exit(1)
  pp.pprint(client.findAndAddContactsByUserid(eval(args[0]),args[1],))

elif cmd == 'findContactByUserid':
  if len(args) != 1:
    print('findContactByUserid requires 1 args')
    sys.exit(1)
  pp.pprint(client.findContactByUserid(args[0],))

elif cmd == 'findContactByUserTicket':
  if len(args) != 1:
    print('findContactByUserTicket requires 1 args')
    sys.exit(1)
  pp.pprint(client.findContactByUserTicket(args[0],))

elif cmd == 'findGroupByTicket':
  if len(args) != 1:
    print('findGroupByTicket requires 1 args')
    sys.exit(1)
  pp.pprint(client.findGroupByTicket(args[0],))

elif cmd == 'findContactsByEmail':
  if len(args) != 1:
    print('findContactsByEmail requires 1 args')
    sys.exit(1)
  pp.pprint(client.findContactsByEmail(eval(args[0]),))

elif cmd == 'findContactsByPhone':
  if len(args) != 1:
    print('findContactsByPhone requires 1 args')
    sys.exit(1)
  pp.pprint(client.findContactsByPhone(eval(args[0]),))

elif cmd == 'findSnsIdUserStatus':
  if len(args) != 3:
    print('findSnsIdUserStatus requires 3 args')
    sys.exit(1)
  pp.pprint(client.findSnsIdUserStatus(eval(args[0]),args[1],args[2],))

elif cmd == 'finishUpdateVerification':
  if len(args) != 1:
    print('finishUpdateVerification requires 1 args')
    sys.exit(1)
  pp.pprint(client.finishUpdateVerification(args[0],))

elif cmd == 'generateUserTicket':
  if len(args) != 2:
    print('generateUserTicket requires 2 args')
    sys.exit(1)
  pp.pprint(client.generateUserTicket(eval(args[0]),eval(args[1]),))

elif cmd == 'getAcceptedProximityMatches':
  if len(args) != 1:
    print('getAcceptedProximityMatches requires 1 args')
    sys.exit(1)
  pp.pprint(client.getAcceptedProximityMatches(args[0],))

elif cmd == 'getActiveBuddySubscriberIds':
  if len(args) != 0:
    print('getActiveBuddySubscriberIds requires 0 args')
    sys.exit(1)
  pp.pprint(client.getActiveBuddySubscriberIds())

elif cmd == 'getAllContactIds':
  if len(args) != 0:
    print('getAllContactIds requires 0 args')
    sys.exit(1)
  pp.pprint(client.getAllContactIds())

elif cmd == 'getAuthQrcode':
  if len(args) != 2:
    print('getAuthQrcode requires 2 args')
    sys.exit(1)
  pp.pprint(client.getAuthQrcode(eval(args[0]),args[1],))

elif cmd == 'getBlockedContactIds':
  if len(args) != 0:
    print('getBlockedContactIds requires 0 args')
    sys.exit(1)
  pp.pprint(client.getBlockedContactIds())

elif cmd == 'getBlockedContactIdsByRange':
  if len(args) != 2:
    print('getBlockedContactIdsByRange requires 2 args')
    sys.exit(1)
  pp.pprint(client.getBlockedContactIdsByRange(eval(args[0]),eval(args[1]),))

elif cmd == 'getBlockedRecommendationIds':
  if len(args) != 0:
    print('getBlockedRecommendationIds requires 0 args')
    sys.exit(1)
  pp.pprint(client.getBlockedRecommendationIds())

elif cmd == 'getBuddyBlockerIds':
  if len(args) != 0:
    print('getBuddyBlockerIds requires 0 args')
    sys.exit(1)
  pp.pprint(client.getBuddyBlockerIds())

elif cmd == 'getBuddyLocation':
  if len(args) != 2:
    print('getBuddyLocation requires 2 args')
    sys.exit(1)
  pp.pprint(client.getBuddyLocation(args[0],eval(args[1]),))

elif cmd == 'getCompactContactsModifiedSince':
  if len(args) != 1:
    print('getCompactContactsModifiedSince requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCompactContactsModifiedSince(eval(args[0]),))

elif cmd == 'getCompactGroup':
  if len(args) != 1:
    print('getCompactGroup requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCompactGroup(args[0],))

elif cmd == 'getCompactRoom':
  if len(args) != 1:
    print('getCompactRoom requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCompactRoom(args[0],))

elif cmd == 'getContact':
  if len(args) != 1:
    print('getContact requires 1 args')
    sys.exit(1)
  pp.pprint(client.getContact(args[0],))

elif cmd == 'getContacts':
  if len(args) != 1:
    print('getContacts requires 1 args')
    sys.exit(1)
  pp.pprint(client.getContacts(eval(args[0]),))

elif cmd == 'getCountryWithRequestIp':
  if len(args) != 0:
    print('getCountryWithRequestIp requires 0 args')
    sys.exit(1)
  pp.pprint(client.getCountryWithRequestIp())

elif cmd == 'getRecentFriendRequests':
  if len(args) != 0:
    print('getRecentFriendRequests requires 0 args')
    sys.exit(1)
  pp.pprint(client.getRecentFriendRequests())

elif cmd == 'getFavoriteMids':
  if len(args) != 0:
    print('getFavoriteMids requires 0 args')
    sys.exit(1)
  pp.pprint(client.getFavoriteMids())

elif cmd == 'getGroup':
  if len(args) != 1:
    print('getGroup requires 1 args')
    sys.exit(1)
  pp.pprint(client.getGroup(args[0],))

elif cmd == 'getGroupIdsInvited':
  if len(args) != 0:
    print('getGroupIdsInvited requires 0 args')
    sys.exit(1)
  pp.pprint(client.getGroupIdsInvited())

elif cmd == 'getGroupIdsJoined':
  if len(args) != 0:
    print('getGroupIdsJoined requires 0 args')
    sys.exit(1)
  pp.pprint(client.getGroupIdsJoined())

elif cmd == 'getGroups':
  if len(args) != 1:
    print('getGroups requires 1 args')
    sys.exit(1)
  pp.pprint(client.getGroups(eval(args[0]),))

elif cmd == 'getHiddenContactMids':
  if len(args) != 0:
    print('getHiddenContactMids requires 0 args')
    sys.exit(1)
  pp.pprint(client.getHiddenContactMids())

elif cmd == 'getIdentityIdentifier':
  if len(args) != 0:
    print('getIdentityIdentifier requires 0 args')
    sys.exit(1)
  pp.pprint(client.getIdentityIdentifier())

elif cmd == 'getLastAnnouncementIndex':
  if len(args) != 0:
    print('getLastAnnouncementIndex requires 0 args')
    sys.exit(1)
  pp.pprint(client.getLastAnnouncementIndex())

elif cmd == 'getLastOpRevision':
  if len(args) != 0:
    print('getLastOpRevision requires 0 args')
    sys.exit(1)
  pp.pprint(client.getLastOpRevision())

elif cmd == 'getMessageBox':
  if len(args) != 3:
    print('getMessageBox requires 3 args')
    sys.exit(1)
  pp.pprint(client.getMessageBox(args[0],args[1],eval(args[2]),))

elif cmd == 'getMessageBoxCompactWrapUp':
  if len(args) != 1:
    print('getMessageBoxCompactWrapUp requires 1 args')
    sys.exit(1)
  pp.pprint(client.getMessageBoxCompactWrapUp(args[0],))

elif cmd == 'getMessageBoxCompactWrapUpList':
  if len(args) != 2:
    print('getMessageBoxCompactWrapUpList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getMessageBoxCompactWrapUpList(eval(args[0]),eval(args[1]),))

elif cmd == 'getMessageBoxList':
  if len(args) != 2:
    print('getMessageBoxList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getMessageBoxList(args[0],eval(args[1]),))

elif cmd == 'getMessageBoxListByStatus':
  if len(args) != 3:
    print('getMessageBoxListByStatus requires 3 args')
    sys.exit(1)
  pp.pprint(client.getMessageBoxListByStatus(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getMessageBoxWrapUp':
  if len(args) != 1:
    print('getMessageBoxWrapUp requires 1 args')
    sys.exit(1)
  pp.pprint(client.getMessageBoxWrapUp(args[0],))

elif cmd == 'getMessageBoxWrapUpList':
  if len(args) != 2:
    print('getMessageBoxWrapUpList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getMessageBoxWrapUpList(eval(args[0]),eval(args[1]),))

elif cmd == 'getMessagesBySequenceNumber':
  if len(args) != 4:
    print('getMessagesBySequenceNumber requires 4 args')
    sys.exit(1)
  pp.pprint(client.getMessagesBySequenceNumber(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'getNextMessages':
  if len(args) != 3:
    print('getNextMessages requires 3 args')
    sys.exit(1)
  pp.pprint(client.getNextMessages(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getNotificationPolicy':
  if len(args) != 1:
    print('getNotificationPolicy requires 1 args')
    sys.exit(1)
  pp.pprint(client.getNotificationPolicy(eval(args[0]),))

elif cmd == 'getPreviousMessages':
  if len(args) != 3:
    print('getPreviousMessages requires 3 args')
    sys.exit(1)
  pp.pprint(client.getPreviousMessages(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getProfile':
  if len(args) != 0:
    print('getProfile requires 0 args')
    sys.exit(1)
  pp.pprint(client.getProfile())

elif cmd == 'getProximityMatchCandidateList':
  if len(args) != 1:
    print('getProximityMatchCandidateList requires 1 args')
    sys.exit(1)
  pp.pprint(client.getProximityMatchCandidateList(args[0],))

elif cmd == 'getProximityMatchCandidates':
  if len(args) != 1:
    print('getProximityMatchCandidates requires 1 args')
    sys.exit(1)
  pp.pprint(client.getProximityMatchCandidates(args[0],))

elif cmd == 'getRecentMessages':
  if len(args) != 2:
    print('getRecentMessages requires 2 args')
    sys.exit(1)
  pp.pprint(client.getRecentMessages(args[0],eval(args[1]),))

elif cmd == 'getRecommendationIds':
  if len(args) != 0:
    print('getRecommendationIds requires 0 args')
    sys.exit(1)
  pp.pprint(client.getRecommendationIds())

elif cmd == 'getRoom':
  if len(args) != 1:
    print('getRoom requires 1 args')
    sys.exit(1)
  pp.pprint(client.getRoom(args[0],))

elif cmd == 'getRSAKeyInfo':
  if len(args) != 1:
    print('getRSAKeyInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.getRSAKeyInfo(eval(args[0]),))

elif cmd == 'getServerTime':
  if len(args) != 0:
    print('getServerTime requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServerTime())

elif cmd == 'getSessions':
  if len(args) != 0:
    print('getSessions requires 0 args')
    sys.exit(1)
  pp.pprint(client.getSessions())

elif cmd == 'getSettings':
  if len(args) != 0:
    print('getSettings requires 0 args')
    sys.exit(1)
  pp.pprint(client.getSettings())

elif cmd == 'getSettingsAttributes':
  if len(args) != 1:
    print('getSettingsAttributes requires 1 args')
    sys.exit(1)
  pp.pprint(client.getSettingsAttributes(eval(args[0]),))

elif cmd == 'getSystemConfiguration':
  if len(args) != 0:
    print('getSystemConfiguration requires 0 args')
    sys.exit(1)
  pp.pprint(client.getSystemConfiguration())

elif cmd == 'getUserTicket':
  if len(args) != 0:
    print('getUserTicket requires 0 args')
    sys.exit(1)
  pp.pprint(client.getUserTicket())

elif cmd == 'getWapInvitation':
  if len(args) != 1:
    print('getWapInvitation requires 1 args')
    sys.exit(1)
  pp.pprint(client.getWapInvitation(args[0],))

elif cmd == 'invalidateUserTicket':
  if len(args) != 0:
    print('invalidateUserTicket requires 0 args')
    sys.exit(1)
  pp.pprint(client.invalidateUserTicket())

elif cmd == 'inviteFriendsBySms':
  if len(args) != 1:
    print('inviteFriendsBySms requires 1 args')
    sys.exit(1)
  pp.pprint(client.inviteFriendsBySms(eval(args[0]),))

elif cmd == 'inviteIntoGroup':
  if len(args) != 3:
    print('inviteIntoGroup requires 3 args')
    sys.exit(1)
  pp.pprint(client.inviteIntoGroup(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'inviteIntoRoom':
  if len(args) != 3:
    print('inviteIntoRoom requires 3 args')
    sys.exit(1)
  pp.pprint(client.inviteIntoRoom(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'inviteViaEmail':
  if len(args) != 3:
    print('inviteViaEmail requires 3 args')
    sys.exit(1)
  pp.pprint(client.inviteViaEmail(eval(args[0]),args[1],args[2],))

elif cmd == 'isIdentityIdentifierAvailable':
  if len(args) != 2:
    print('isIdentityIdentifierAvailable requires 2 args')
    sys.exit(1)
  pp.pprint(client.isIdentityIdentifierAvailable(eval(args[0]),args[1],))

elif cmd == 'isUseridAvailable':
  if len(args) != 1:
    print('isUseridAvailable requires 1 args')
    sys.exit(1)
  pp.pprint(client.isUseridAvailable(args[0],))

elif cmd == 'kickoutFromGroup':
  if len(args) != 3:
    print('kickoutFromGroup requires 3 args')
    sys.exit(1)
  pp.pprint(client.kickoutFromGroup(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'leaveGroup':
  if len(args) != 2:
    print('leaveGroup requires 2 args')
    sys.exit(1)
  pp.pprint(client.leaveGroup(eval(args[0]),args[1],))

elif cmd == 'leaveRoom':
  if len(args) != 2:
    print('leaveRoom requires 2 args')
    sys.exit(1)
  pp.pprint(client.leaveRoom(eval(args[0]),args[1],))

elif cmd == 'loginWithIdentityCredential':
  if len(args) != 7:
    print('loginWithIdentityCredential requires 7 args')
    sys.exit(1)
  pp.pprint(client.loginWithIdentityCredential(eval(args[0]),args[1],args[2],eval(args[3]),args[4],args[5],args[6],))

elif cmd == 'loginWithIdentityCredentialForCertificate':
  if len(args) != 7:
    print('loginWithIdentityCredentialForCertificate requires 7 args')
    sys.exit(1)
  pp.pprint(client.loginWithIdentityCredentialForCertificate(eval(args[0]),args[1],args[2],eval(args[3]),args[4],args[5],args[6],))

elif cmd == 'loginWithVerifier':
  if len(args) != 1:
    print('loginWithVerifier requires 1 args')
    sys.exit(1)
  pp.pprint(client.loginWithVerifier(args[0],))

elif cmd == 'loginWithVerifierForCerificate':
  if len(args) != 1:
    print('loginWithVerifierForCerificate requires 1 args')
    sys.exit(1)
  pp.pprint(client.loginWithVerifierForCerificate(args[0],))

elif cmd == 'loginWithVerifierForCertificate':
  if len(args) != 1:
    print('loginWithVerifierForCertificate requires 1 args')
    sys.exit(1)
  pp.pprint(client.loginWithVerifierForCertificate(args[0],))

elif cmd == 'loginZ':
  if len(args) != 1:
    print('loginZ requires 1 args')
    sys.exit(1)
  pp.pprint(client.loginZ(eval(args[0]),))

elif cmd == 'logout':
  if len(args) != 0:
    print('logout requires 0 args')
    sys.exit(1)
  pp.pprint(client.logout())

elif cmd == 'logoutSession':
  if len(args) != 1:
    print('logoutSession requires 1 args')
    sys.exit(1)
  pp.pprint(client.logoutSession(args[0],))

elif cmd == 'noop':
  if len(args) != 0:
    print('noop requires 0 args')
    sys.exit(1)
  pp.pprint(client.noop())

elif cmd == 'notifiedRedirect':
  if len(args) != 1:
    print('notifiedRedirect requires 1 args')
    sys.exit(1)
  pp.pprint(client.notifiedRedirect(eval(args[0]),))

elif cmd == 'notifyBuddyOnAir':
  if len(args) != 2:
    print('notifyBuddyOnAir requires 2 args')
    sys.exit(1)
  pp.pprint(client.notifyBuddyOnAir(eval(args[0]),eval(args[1]),))

elif cmd == 'notifyIndividualEvent':
  if len(args) != 2:
    print('notifyIndividualEvent requires 2 args')
    sys.exit(1)
  pp.pprint(client.notifyIndividualEvent(eval(args[0]),eval(args[1]),))

elif cmd == 'notifyInstalled':
  if len(args) != 2:
    print('notifyInstalled requires 2 args')
    sys.exit(1)
  pp.pprint(client.notifyInstalled(args[0],args[1],))

elif cmd == 'notifyRegistrationComplete':
  if len(args) != 2:
    print('notifyRegistrationComplete requires 2 args')
    sys.exit(1)
  pp.pprint(client.notifyRegistrationComplete(args[0],args[1],))

elif cmd == 'notifySleep':
  if len(args) != 2:
    print('notifySleep requires 2 args')
    sys.exit(1)
  pp.pprint(client.notifySleep(eval(args[0]),eval(args[1]),))

elif cmd == 'notifyUpdated':
  if len(args) != 2:
    print('notifyUpdated requires 2 args')
    sys.exit(1)
  pp.pprint(client.notifyUpdated(eval(args[0]),eval(args[1]),))

elif cmd == 'openProximityMatch':
  if len(args) != 1:
    print('openProximityMatch requires 1 args')
    sys.exit(1)
  pp.pprint(client.openProximityMatch(eval(args[0]),))

elif cmd == 'registerBuddyUser':
  if len(args) != 2:
    print('registerBuddyUser requires 2 args')
    sys.exit(1)
  pp.pprint(client.registerBuddyUser(args[0],args[1],))

elif cmd == 'registerBuddyUserid':
  if len(args) != 2:
    print('registerBuddyUserid requires 2 args')
    sys.exit(1)
  pp.pprint(client.registerBuddyUserid(eval(args[0]),args[1],))

elif cmd == 'registerDevice':
  if len(args) != 1:
    print('registerDevice requires 1 args')
    sys.exit(1)
  pp.pprint(client.registerDevice(args[0],))

elif cmd == 'registerDeviceWithIdentityCredential':
  if len(args) != 4:
    print('registerDeviceWithIdentityCredential requires 4 args')
    sys.exit(1)
  pp.pprint(client.registerDeviceWithIdentityCredential(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'registerDeviceWithoutPhoneNumber':
  if len(args) != 3:
    print('registerDeviceWithoutPhoneNumber requires 3 args')
    sys.exit(1)
  pp.pprint(client.registerDeviceWithoutPhoneNumber(args[0],args[1],eval(args[2]),))

elif cmd == 'registerDeviceWithoutPhoneNumberWithIdentityCredential':
  if len(args) != 7:
    print('registerDeviceWithoutPhoneNumberWithIdentityCredential requires 7 args')
    sys.exit(1)
  pp.pprint(client.registerDeviceWithoutPhoneNumberWithIdentityCredential(args[0],args[1],eval(args[2]),eval(args[3]),args[4],args[5],args[6],))

elif cmd == 'registerUserid':
  if len(args) != 2:
    print('registerUserid requires 2 args')
    sys.exit(1)
  pp.pprint(client.registerUserid(eval(args[0]),args[1],))

elif cmd == 'registerWapDevice':
  if len(args) != 4:
    print('registerWapDevice requires 4 args')
    sys.exit(1)
  pp.pprint(client.registerWapDevice(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'registerWithExistingSnsIdAndIdentityCredential':
  if len(args) != 4:
    print('registerWithExistingSnsIdAndIdentityCredential requires 4 args')
    sys.exit(1)
  pp.pprint(client.registerWithExistingSnsIdAndIdentityCredential(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'registerWithSnsId':
  if len(args) != 6:
    print('registerWithSnsId requires 6 args')
    sys.exit(1)
  pp.pprint(client.registerWithSnsId(eval(args[0]),args[1],args[2],args[3],eval(args[4]),args[5],))

elif cmd == 'registerWithSnsIdAndIdentityCredential':
  if len(args) != 6:
    print('registerWithSnsIdAndIdentityCredential requires 6 args')
    sys.exit(1)
  pp.pprint(client.registerWithSnsIdAndIdentityCredential(eval(args[0]),args[1],eval(args[2]),args[3],args[4],eval(args[5]),))

elif cmd == 'reissueDeviceCredential':
  if len(args) != 0:
    print('reissueDeviceCredential requires 0 args')
    sys.exit(1)
  pp.pprint(client.reissueDeviceCredential())

elif cmd == 'reissueUserTicket':
  if len(args) != 2:
    print('reissueUserTicket requires 2 args')
    sys.exit(1)
  pp.pprint(client.reissueUserTicket(eval(args[0]),eval(args[1]),))

elif cmd == 'reissueGroupTicket':
  if len(args) != 1:
    print('reissueGroupTicket requires 1 args')
    sys.exit(1)
  pp.pprint(client.reissueGroupTicket(args[0],))

elif cmd == 'rejectGroupInvitation':
  if len(args) != 2:
    print('rejectGroupInvitation requires 2 args')
    sys.exit(1)
  pp.pprint(client.rejectGroupInvitation(eval(args[0]),args[1],))

elif cmd == 'releaseSession':
  if len(args) != 0:
    print('releaseSession requires 0 args')
    sys.exit(1)
  pp.pprint(client.releaseSession())

elif cmd == 'removeAllMessages':
  if len(args) != 2:
    print('removeAllMessages requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeAllMessages(eval(args[0]),args[1],))

elif cmd == 'removeBuddyLocation':
  if len(args) != 2:
    print('removeBuddyLocation requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeBuddyLocation(args[0],eval(args[1]),))

elif cmd == 'removeMessage':
  if len(args) != 1:
    print('removeMessage requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeMessage(args[0],))

elif cmd == 'removeMessageFromMyHome':
  if len(args) != 1:
    print('removeMessageFromMyHome requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeMessageFromMyHome(args[0],))

elif cmd == 'removeSnsId':
  if len(args) != 1:
    print('removeSnsId requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeSnsId(eval(args[0]),))

elif cmd == 'report':
  if len(args) != 3:
    print('report requires 3 args')
    sys.exit(1)
  pp.pprint(client.report(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'reportContacts':
  if len(args) != 4:
    print('reportContacts requires 4 args')
    sys.exit(1)
  pp.pprint(client.reportContacts(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'reportGroups':
  if len(args) != 2:
    print('reportGroups requires 2 args')
    sys.exit(1)
  pp.pprint(client.reportGroups(eval(args[0]),eval(args[1]),))

elif cmd == 'reportProfile':
  if len(args) != 2:
    print('reportProfile requires 2 args')
    sys.exit(1)
  pp.pprint(client.reportProfile(eval(args[0]),eval(args[1]),))

elif cmd == 'reportRooms':
  if len(args) != 2:
    print('reportRooms requires 2 args')
    sys.exit(1)
  pp.pprint(client.reportRooms(eval(args[0]),eval(args[1]),))

elif cmd == 'reportSettings':
  if len(args) != 2:
    print('reportSettings requires 2 args')
    sys.exit(1)
  pp.pprint(client.reportSettings(eval(args[0]),eval(args[1]),))

elif cmd == 'reportSpammer':
  if len(args) != 3:
    print('reportSpammer requires 3 args')
    sys.exit(1)
  pp.pprint(client.reportSpammer(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'requestAccountPasswordReset':
  if len(args) != 3:
    print('requestAccountPasswordReset requires 3 args')
    sys.exit(1)
  pp.pprint(client.requestAccountPasswordReset(eval(args[0]),args[1],args[2],))

elif cmd == 'requestEmailConfirmation':
  if len(args) != 1:
    print('requestEmailConfirmation requires 1 args')
    sys.exit(1)
  pp.pprint(client.requestEmailConfirmation(eval(args[0]),))

elif cmd == 'requestIdentityUnbind':
  if len(args) != 2:
    print('requestIdentityUnbind requires 2 args')
    sys.exit(1)
  pp.pprint(client.requestIdentityUnbind(eval(args[0]),args[1],))

elif cmd == 'resendEmailConfirmation':
  if len(args) != 1:
    print('resendEmailConfirmation requires 1 args')
    sys.exit(1)
  pp.pprint(client.resendEmailConfirmation(args[0],))

elif cmd == 'resendPinCode':
  if len(args) != 1:
    print('resendPinCode requires 1 args')
    sys.exit(1)
  pp.pprint(client.resendPinCode(args[0],))

elif cmd == 'resendPinCodeBySMS':
  if len(args) != 1:
    print('resendPinCodeBySMS requires 1 args')
    sys.exit(1)
  pp.pprint(client.resendPinCodeBySMS(args[0],))

elif cmd == 'sendChatChecked':
  if len(args) != 3:
    print('sendChatChecked requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendChatChecked(eval(args[0]),args[1],args[2],))

elif cmd == 'sendChatRemoved':
  if len(args) != 3:
    print('sendChatRemoved requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendChatRemoved(eval(args[0]),args[1],args[2],))

elif cmd == 'sendContentPreviewUpdated':
  if len(args) != 3:
    print('sendContentPreviewUpdated requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendContentPreviewUpdated(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'sendContentReceipt':
  if len(args) != 3:
    print('sendContentReceipt requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendContentReceipt(eval(args[0]),args[1],args[2],))

elif cmd == 'sendDummyPush':
  if len(args) != 0:
    print('sendDummyPush requires 0 args')
    sys.exit(1)
  pp.pprint(client.sendDummyPush())

elif cmd == 'sendEvent':
  if len(args) != 2:
    print('sendEvent requires 2 args')
    sys.exit(1)
  pp.pprint(client.sendEvent(eval(args[0]),eval(args[1]),))

elif cmd == 'sendMessage':
  if len(args) != 2:
    print('sendMessage requires 2 args')
    sys.exit(1)
  pp.pprint(client.sendMessage(eval(args[0]),eval(args[1]),))

elif cmd == 'sendMessageIgnored':
  if len(args) != 3:
    print('sendMessageIgnored requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendMessageIgnored(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'sendMessageReceipt':
  if len(args) != 3:
    print('sendMessageReceipt requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendMessageReceipt(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'sendMessageToMyHome':
  if len(args) != 2:
    print('sendMessageToMyHome requires 2 args')
    sys.exit(1)
  pp.pprint(client.sendMessageToMyHome(eval(args[0]),eval(args[1]),))

elif cmd == 'setBuddyLocation':
  if len(args) != 3:
    print('setBuddyLocation requires 3 args')
    sys.exit(1)
  pp.pprint(client.setBuddyLocation(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'setIdentityCredential':
  if len(args) != 3:
    print('setIdentityCredential requires 3 args')
    sys.exit(1)
  pp.pprint(client.setIdentityCredential(eval(args[0]),args[1],args[2],))

elif cmd == 'setNotificationsEnabled':
  if len(args) != 4:
    print('setNotificationsEnabled requires 4 args')
    sys.exit(1)
  pp.pprint(client.setNotificationsEnabled(eval(args[0]),eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'startUpdateVerification':
  if len(args) != 7:
    print('startUpdateVerification requires 7 args')
    sys.exit(1)
  pp.pprint(client.startUpdateVerification(args[0],eval(args[1]),args[2],args[3],eval(args[4]),args[5],args[6],))

elif cmd == 'startVerification':
  if len(args) != 8:
    print('startVerification requires 8 args')
    sys.exit(1)
  pp.pprint(client.startVerification(args[0],eval(args[1]),args[2],args[3],eval(args[4]),args[5],args[6],args[7],))

elif cmd == 'storeUpdateProfileAttribute':
  if len(args) != 3:
    print('storeUpdateProfileAttribute requires 3 args')
    sys.exit(1)
  pp.pprint(client.storeUpdateProfileAttribute(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'syncContactBySnsIds':
  if len(args) != 2:
    print('syncContactBySnsIds requires 2 args')
    sys.exit(1)
  pp.pprint(client.syncContactBySnsIds(eval(args[0]),eval(args[1]),))

elif cmd == 'syncContacts':
  if len(args) != 2:
    print('syncContacts requires 2 args')
    sys.exit(1)
  pp.pprint(client.syncContacts(eval(args[0]),eval(args[1]),))

elif cmd == 'trySendMessage':
  if len(args) != 2:
    print('trySendMessage requires 2 args')
    sys.exit(1)
  pp.pprint(client.trySendMessage(eval(args[0]),eval(args[1]),))

elif cmd == 'unblockContact':
  if len(args) != 2:
    print('unblockContact requires 2 args')
    sys.exit(1)
  pp.pprint(client.unblockContact(eval(args[0]),args[1],))

elif cmd == 'unblockRecommendation':
  if len(args) != 2:
    print('unblockRecommendation requires 2 args')
    sys.exit(1)
  pp.pprint(client.unblockRecommendation(eval(args[0]),args[1],))

elif cmd == 'unregisterUserAndDevice':
  if len(args) != 0:
    print('unregisterUserAndDevice requires 0 args')
    sys.exit(1)
  pp.pprint(client.unregisterUserAndDevice())

elif cmd == 'updateApnsDeviceToken':
  if len(args) != 1:
    print('updateApnsDeviceToken requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateApnsDeviceToken(args[0],))

elif cmd == 'updateBuddySetting':
  if len(args) != 2:
    print('updateBuddySetting requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateBuddySetting(args[0],args[1],))

elif cmd == 'updateC2DMRegistrationId':
  if len(args) != 1:
    print('updateC2DMRegistrationId requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateC2DMRegistrationId(args[0],))

elif cmd == 'updateContactSetting':
  if len(args) != 4:
    print('updateContactSetting requires 4 args')
    sys.exit(1)
  pp.pprint(client.updateContactSetting(eval(args[0]),args[1],eval(args[2]),args[3],))

elif cmd == 'updateCustomModeSettings':
  if len(args) != 2:
    print('updateCustomModeSettings requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateCustomModeSettings(eval(args[0]),eval(args[1]),))

elif cmd == 'updateDeviceInfo':
  if len(args) != 2:
    print('updateDeviceInfo requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateDeviceInfo(args[0],eval(args[1]),))

elif cmd == 'updateGroup':
  if len(args) != 2:
    print('updateGroup requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateGroup(eval(args[0]),eval(args[1]),))

elif cmd == 'updateNotificationToken':
  if len(args) != 2:
    print('updateNotificationToken requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateNotificationToken(eval(args[0]),args[1],))

elif cmd == 'updateNotificationTokenWithBytes':
  if len(args) != 2:
    print('updateNotificationTokenWithBytes requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateNotificationTokenWithBytes(eval(args[0]),args[1],))

elif cmd == 'updateProfile':
  if len(args) != 2:
    print('updateProfile requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateProfile(eval(args[0]),eval(args[1]),))

elif cmd == 'updateProfileAttribute':
  if len(args) != 3:
    print('updateProfileAttribute requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateProfileAttribute(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'updateRegion':
  if len(args) != 1:
    print('updateRegion requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateRegion(args[0],))

elif cmd == 'updateSettings':
  if len(args) != 2:
    print('updateSettings requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateSettings(eval(args[0]),eval(args[1]),))

elif cmd == 'updateSettings2':
  if len(args) != 2:
    print('updateSettings2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateSettings2(eval(args[0]),eval(args[1]),))

elif cmd == 'updateSettingsAttribute':
  if len(args) != 3:
    print('updateSettingsAttribute requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateSettingsAttribute(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'updateSettingsAttributes':
  if len(args) != 3:
    print('updateSettingsAttributes requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateSettingsAttributes(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'verifyIdentityCredential':
  if len(args) != 3:
    print('verifyIdentityCredential requires 3 args')
    sys.exit(1)
  pp.pprint(client.verifyIdentityCredential(eval(args[0]),args[1],args[2],))

elif cmd == 'verifyIdentityCredentialWithResult':
  if len(args) != 1:
    print('verifyIdentityCredentialWithResult requires 1 args')
    sys.exit(1)
  pp.pprint(client.verifyIdentityCredentialWithResult(eval(args[0]),))

elif cmd == 'verifyPhone':
  if len(args) != 3:
    print('verifyPhone requires 3 args')
    sys.exit(1)
  pp.pprint(client.verifyPhone(args[0],args[1],args[2],))

elif cmd == 'verifyQrcode':
  if len(args) != 2:
    print('verifyQrcode requires 2 args')
    sys.exit(1)
  pp.pprint(client.verifyQrcode(args[0],args[1],))

elif cmd == 'notify':
  if len(args) != 1:
    print('notify requires 1 args')
    sys.exit(1)
  pp.pprint(client.notify(eval(args[0]),))

elif cmd == 'inviteIntoGroupCall':
  if len(args) != 2:
    print('inviteIntoGroupCall requires 2 args')
    sys.exit(1)
  pp.pprint(client.inviteIntoGroupCall(args[0],eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
